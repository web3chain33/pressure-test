package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"math/big"
	"os"
	"sort"
	"sync"
	"time"

	"github.com/web3chain33/pressure-test/avax"
	"github.com/web3chain33/pressure-test/avax/goods"

	"github.com/ethereum/go-ethereum/crypto"
)

var (
	testAbi       = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuccessNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"
	testBin       = ""
	testKeyString = "56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027"
	// testContractAddrString = "0xA4cD3b0Eb6E5Ab5d8CE4065BcCD70040ADAB1F00"

	testKey, _ = crypto.HexToECDSA(testKeyString)
	// testAddr   = crypto.PubkeyToAddress(testKey.PublicKey)
	// testContractAddr = common.HexToAddress(testContractAddrString)
	// 172.16.103.233
	testHost = flag.String("host", "http://172.16.103.233:9652/ext/bc/C/rpc", "host")
	// AbiBinFileName = flag.String("b", "./Goods.bin", "abi bin file path")
)

func main() {
	flag.Parse()

	evmClient, err := avax.NewClient(*testHost)
	if err != nil {
		panic(err)
	}
	TestMint(evmClient)
}

func TestMint(evmClient *avax.Client) {
	fmt.Println("mint task begin")
	defer fmt.Println("mint task end")
	resc := make(chan *BatchMintResult)
	taskNumber := 10
	for i := 0; i < taskNumber; i++ {
		id := i
		go func() {
			res, err := BatchMint(evmClient, 500, 1)
			if err != nil {
				res = &BatchMintResult{
					ID:        id,
					Err:       err,
					Count:     500,
					ThreadNum: 1,
				}
			}
			res.ID = id
			resc <- res
		}()
	}

	f, err := os.Create("MintRes" + time.Now().Format("20060102T150405"))
	if err != nil {
		fmt.Println("create result file failed:" + err.Error())
		return
	}
	defer func() {
		_ = f.Close()
	}()
	res := make([]*BatchMintResult, 0, 5)
	for i := 0; i < taskNumber; i++ {
		r := <-resc
		if r.Err != nil {
			fmt.Println("task err", r.Err)
			continue
		}
		_, _ = fmt.Fprintln(f, r.StringSend())
		res = append(res, r)
	}

	for _, v := range res {
		v.StartWaitResult()
	}

	var sumCount int64 = 0
	var lastBlockTime uint64 = 0
	var firstBlockTime uint64 = math.MaxUint64
	for _, v := range res {
		<-v.WaitEnd
		sumCount += v.Count
		if lastBlockTime < v.LastBlockTime {
			lastBlockTime = v.LastBlockTime
		}
		if firstBlockTime > v.FirstBlockTime {
			firstBlockTime = v.FirstBlockTime
		}
		_, _ = fmt.Fprintln(f, v.StringWait())
	}
	_, _ = fmt.Fprintf(f, "sum,fTime:%d, lTime:%d, count:%d, tps:%f\n", firstBlockTime, lastBlockTime, sumCount, float64(sumCount)/float64(lastBlockTime-firstBlockTime))
}

type MintResult struct {
	ID    int64
	Hash  string
	Nonce uint64
	Err   error

	WaitErr          error
	BlockNumber      big.Int
	TransactionIndex uint
	BlockTime        uint64
}

func (r *MintResult) String() string {
	if r.Err != nil {
		return fmt.Sprintf("ID:%d, Nonce:%d, Err:%s", r.ID, r.Nonce, r.Err.Error())
	}
	return fmt.Sprintf("ID:%d, Nonce:%d, Hash:%s", r.ID, r.Nonce, r.Hash)
}

type BatchMintResult struct {
	ID          int
	Err         error
	Result      []*MintResult
	Client      *goods.Client
	Start, End  time.Time
	Count       int64
	FailedCount int64
	ThreadNum   int

	WaitEnd          chan struct{}
	FirstBlockTime   uint64
	FirstBlockNumber big.Int
	LastBlockTime    uint64
	LastBlockNumber  big.Int
}

func (r *BatchMintResult) StringSend() string {
	return fmt.Sprintf("id:%d,start:%s,end:%s,time:%ds,threads:%d,count:%d,failed:%d,tps:%f",
		r.ID,
		r.Start.Format(time.RFC3339Nano),
		r.End.Format(time.RFC3339Nano),
		r.End.Unix()-r.Start.Unix(),
		r.ThreadNum,
		r.Count,
		r.FailedCount,
		float64(r.Count)/float64(r.End.Unix()-r.Start.Unix()),
	)
}

func (r *BatchMintResult) StartWaitResult() {
	go func() {
		fmt.Printf("WaitResult start, id:%d,count:%d,threadNum:%d\n", r.ID, r.Count, r.ThreadNum)
		defer fmt.Printf("WaitResult id:%d\n", r.ID)
		client := r.Client
		first := true
		for i := range r.Result {
			if r.Result[i].Err != nil {
				continue
			}
			tx, err := client.Evm.WaitTransaction(r.Result[i].Hash)
			if err != nil {
				r.Result[i].WaitErr = err
			} else {
				r.Result[i].BlockTime = tx.Header.Time
				r.Result[i].BlockNumber = *tx.Rcpt.BlockNumber
				r.Result[i].TransactionIndex = tx.Rcpt.TransactionIndex
				if first {
					r.FirstBlockTime = tx.Header.Time
					r.FirstBlockNumber = *tx.Rcpt.BlockNumber
					first = false
				}
				r.LastBlockTime = tx.Header.Time
				r.LastBlockNumber = *tx.Rcpt.BlockNumber
			}
		}
		r.WaitEnd <- struct{}{}
	}()
}

func (r *BatchMintResult) StringWait() string {
	return fmt.Sprintf("fNum:%d,lNum:%d,fTime:%d,lTime:%d,count:%d,tps:%f",
		r.FirstBlockNumber.Uint64(),
		r.LastBlockNumber.Uint64(),
		r.FirstBlockTime,
		r.LastBlockTime,
		r.Count,
		float64(r.Count)/float64(r.LastBlockTime-r.FirstBlockTime),
	)
}

func BatchMint(evmClient *avax.Client, count int64, threadNum int) (*BatchMintResult, error) {
	fmt.Printf("BatchMint start, count:%d,threadNum:%d\n", count, threadNum)
	defer fmt.Println("BatchMint end")
	client, err := goods.NewAccountClient(evmClient, testKey, testAbi, []byte(testBin))
	if err != nil {
		return nil, err
	}

	res := make([]*MintResult, 0, count)
	failedCount := int64(0)

	// start mint
	// fmt.Println("start mint")
	startTime := time.Now()

	task := make(chan int64, threadNum)
	end := make(chan struct{}, threadNum)
	resc := make(chan *MintResult, threadNum)

	// result collect
	go func() {
		for r := range resc {
			if r.Err != nil {
				failedCount++
			}
			res = append(res, r)
		}
	}()
	wait := sync.WaitGroup{}

	// threads create
	for i := 0; i < threadNum; i++ {
		wait.Add(1)
		go func() {
			for {
				select {
				case n := <-task:
					hash, nonce, err := client.BatchMint(client.OwnerAddr, []*big.Int{big.NewInt(n)})
					resc <- &MintResult{ID: n, Hash: hash, Nonce: nonce, Err: err}
				case <-end:
					wait.Done()
					return
				}
			}
		}()
	}

	// task begin
	for i := int64(0); i < count; i++ {
		task <- i
	}

	// end threads
	for i := 0; i < threadNum; i++ {
		end <- struct{}{}
	}
	wait.Wait()

	sort.Slice(res, func(i, j int) bool {
		return res[i].Nonce < res[j].Nonce
	})
	return &BatchMintResult{Client: client, Start: startTime, End: time.Now(), Result: res, FailedCount: failedCount, Count: count, ThreadNum: threadNum, WaitEnd: make(chan struct{}, threadNum)}, nil
}

func observeChain(client *avax.Client) {
	var interval int64 = 5
	lh, err := client.BlockNumber(context.Background())
	if err != nil {
		panic(err)
	}
	ticker := time.NewTicker(time.Duration(interval) * time.Second)
	for range ticker.C {
		h, _ := client.BlockNumber(context.Background())
		count := 0
		for i := lh + 1; i <= h; i++ {
			block, err := client.BlockByNumber(context.Background(), big.NewInt(int64(i)))
			if err != nil {
				fmt.Printf("client.BlockByNumber(%d) Err:%s\n", i, err.Error())
			}
			count += len(block.Transactions())
		}
		fmt.Printf("height:%d, txcount:%d, time:%ds, tps:%f\n", h, count, interval, float64(count)/float64(interval))
		lh = h
	}
}
